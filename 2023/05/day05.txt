from os import path
from typing import Tuple

import numpy as np

ROOTDIR = path.dirname(__file__)
file = open(path.join(ROOTDIR, 'input_test.txt'), 'r')
almanach = [line.replace('\n', '') for line in file.readlines()]

seeds = np.array(almanach[0].split(': ')[-1].split())
seeds = np.array([int(seed) for seed in seeds])

# Part 1
index = 1
current_source = seeds
while index < len(almanach):
    line = almanach[index]
    if line.endswith(':'):
        index += 1
        destination_line = len(current_source) * [-1]
        while index < len(almanach):
            line = almanach[index]
            if line == '':
                break
            destination, source, range_len = line.split()
            destination = np.int64(destination)
            source = np.int64(source)
            range_len = np.int64(range_len)
            for seed_index in range(len(current_source)):
                if destination_line[seed_index] == -1:
                    seed = current_source[seed_index]
                    if seed >= source and seed < source + range_len:
                        destination_line[seed_index] = seed - source + destination
            index += 1
        for seed_index in range(len(current_source)):
            if destination_line[seed_index] == -1:
                destination_line[seed_index] = current_source[seed_index]
        current_source = destination_line
    else:
        index += 1

# print(current_source)
# print(min(current_source))

# Part 2

new_seeds = []
for index in range(int(len(seeds)/2)):
    new_seeds += [(seeds[index*2], seeds[index*2 + 1] + seeds[index*2] - 1)]

new_seeds = sorted(new_seeds, key=lambda x: x[0])

sections = {}
current_section = None
for line in almanach[1:]:
    if line.endswith(':'):
        current_section = len(sections)
        sections[current_section] = []
    elif line == '':
        pass
    else:
        destination, source, range_len = line.split()
        destination = np.int64(destination)
        source = np.int64(source)
        range_len = np.int64(range_len)
        sections[current_section].append([destination, source, range_len])


def find_intersection(array: Tuple[int, int], filter: Tuple[int, int]):
    if array[0] >= filter[0] and array[1] <= filter[1]:
        return array, []
    if array[0] <= filter[0] and array[1] >= filter[1]:
        return (filter[0], filter[1]), [None if array[0] == filter[0] else (array[0], filter[0] - 1),
                                        None if filter[1] == array[1] else (filter[1] + 1, array[1])]
    if array[1] < filter[0] or filter[1] < array[0]:
        return None, []
    if array[1] == filter[0]:
        return (array[1], filter[0]), [(array[0], array[1] - 1)]
    if array[0] == filter[1]:
        return (array[0], filter[1]), [(array[0] + 1, array[1])]
    if array[0] >= filter[0] and array[1] >= filter[1]:
        return (array[0], filter[1]), [None if filter[1] == array[1] else (filter[1] + 1, array[1])]
    if array[0] <= filter[0] and array[1] <= filter[1]:
        return (filter[0], array[1]), [None if array[0] == filter[0] else (array[0], filter[0] - 1)]

    print(array, filter)
    print('I got there')


# print(find_intersection((2, 7), (6, 10)))  # (6, 7) [(2, 5)]
# print(find_intersection((6, 10), (2, 7)))  # (6, 7) [(8, 10)]
# print(find_intersection((0, 6), (2, 7)))  # (2, 6) [(0, 1)]
# print(find_intersection((0, 3), (0, 5)))  # (0, 3) []
# print(find_intersection((0, 2), (1, 2)))  # (1, 2) [(0, 0)]
# print(find_intersection((0, 3), (4, 7)))  # None, []
# print(find_intersection((0, 3), (3, 7)))  # (3, 3) [(0, 2)]
# print(find_intersection((3, 7), (0, 3)))  # (3, 3) [(4, 7)]
# print(find_intersection((0, 7), (3, 5)))  # (3, 5) [(0,2), (6, 7)]


current_source = new_seeds
for section_name, section in sections.items():
    print(f'starting source for {section_name}')
    current_destination = []
    index = 0
    while index < len(current_source):
        # Appply each filter to the source
        for destination, source, range_len in section:
            if index >= len(current_source):
                break
            seed = current_source[index]
            print(f'processing source {seed}')
            intersect, rest = find_intersection(seed, (source, source + range_len))
            if intersect is not None:
                print(f'intersection found between {seed} and {(source, source + range_len)} : {intersect}')
                print(f'old source: {current_source}')
                print(index)
                current_source.pop(index)

                for rest_array in rest:
                    if rest is not None:
                        current_source.append(rest_array)
                print(f'new source: {current_source}')
                print(
                    f'adding to destination: {(intersect[0] - source + destination, intersect[1] - source + destination)} from interesect {intersect} and new start {destination}\n')
                current_destination.append((intersect[0] - source + destination, intersect[1] - source + destination))
            else:
                index += 1

    current_source = current_destination + current_source
    print(f'next source {current_source}\n')

print(sorted(current_source, key=lambda x: x[0]))
print(new_seeds)
